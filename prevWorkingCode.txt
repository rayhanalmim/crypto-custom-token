===== App.js =====
import React, { useState, useEffect, useCallback } from 'react';
import Web3 from 'web3';
import './App.css';

const App = () => {
  const [web3, setWeb3] = useState(null);
  const [account, setAccount] = useState(null);
  const [balance, setBalance] = useState(null);
  const [recipient, setRecipient] = useState('');
  const [amount, setAmount] = useState('');
  const [transactionHash, setTransactionHash] = useState(null);
  
  const loadBalance = useCallback(async (account) => {
    if (web3) {
      const balance = await web3.eth.getBalance(account);
      setBalance(web3.utils.fromWei(balance, 'ether'));
    }
  }, [web3]);

  useEffect(() => {
    if (window.ethereum) {
      const web3Instance = new Web3(window.ethereum);
      setWeb3(web3Instance);

      // Handle account changes
      window.ethereum.on('accountsChanged', (accounts) => {
        if (accounts.length > 0) {
          setAccount(accounts[0]);
          loadBalance(accounts[0]);
        } else {
          setAccount(null);
          setBalance(null);
        }
      });
    } else {
      alert('MetaMask is not installed');
    }
  }, [loadBalance]);

  const connectWallet = async () => {
    if (web3) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        setAccount(accounts[0]);
        loadBalance(accounts[0]);
      } catch (error) {
        console.error(error);
      }
    }
  };

  const disconnectWallet = () => {
    setAccount(null);
    setBalance(null);
    setRecipient('');
    setAmount('');
    setTransactionHash(null);

    // Force MetaMask to prompt for account selection
    window.location.reload();
  };

  const handleTransfer = async () => {
    if (web3 && account && recipient && amount) {
      try {
        const value = web3.utils.toWei(amount, 'ether');
        const tx = await web3.eth.sendTransaction({
          from: account,
          to: recipient,
          value,
        });
        setTransactionHash(tx.transactionHash);
      } catch (error) {
        console.error(error);
      }
    }
  };

  const closeModal = () => {
    setTransactionHash(null);
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>MetaMask Token Transfer</h1>
        {!account ? (
          <button onClick={connectWallet}>Connect MetaMask</button>
        ) : (
          <div>
            <p>Account: {account}</p>
            <p>Balance: {balance} ETH</p>
            <input
              type="text"
              placeholder="Recipient Address"
              value={recipient}
              onChange={(e) => setRecipient(e.target.value)}
            />
            <input
              type="text"
              placeholder="Amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
            />
            <button onClick={handleTransfer}>Send</button>
            <button onClick={disconnectWallet}>Disconnect</button>
          </div>
        )}
        {transactionHash && (
          <div className="modal">
            <div className="modal-content">
              <span className="close-button" onClick={closeModal}>&times;</span>
              <p>Transaction successful!</p>
              <p>Transaction ID: {transactionHash}</p>
            </div>
          </div>
        )}
      </header>
    </div>
  );
};

export default App;







===== App.css ======
.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

input {
  margin: 10px;
  padding: 10px;
  font-size: 1rem;
}

button {
  margin: 10px;
  padding: 10px 20px;
  font-size: 1rem;
  cursor: pointer;
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background-color: white;
  color: black;
  padding: 20px;
  border-radius: 10px;
  text-align: center;
  width: 100%;
  /* max-width: 500px;/ */
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  font-size: 1.5rem;
  cursor: pointer;
}

.modal p {
  margin: 10px 0;
}






Failed to load token LINK: TypeError: Cannot mix BigInt and other types, use explicit conversions
    at App.js:65:1
    at async connectWallet (App.js:107:1)



import React, { useState, useEffect, useCallback, useMemo } from 'react';
import Web3 from 'web3';
import bigInt from 'big-integer';
import './App.css';

const ERC20_ABI = [
  {
    constant: true,
    inputs: [{ name: "_owner", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "balance", type: "uint256" }],
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", type: "uint8" }],
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", type: "string" }],
    type: "function",
  },
];

const App = () => {
  const [web3, setWeb3] = useState(null);
  const [account, setAccount] = useState(null);
  const [balance, setBalance] = useState(null);
  const [tokens, setTokens] = useState([]);
  const [selectedToken, setSelectedToken] = useState(null);
  const [recipient, setRecipient] = useState('');
  const [amount, setAmount] = useState('');
  const [transactionHash, setTransactionHash] = useState(null);

  const knownTokens = useMemo(() => [
    { name: 'LINK', address: '0x779877A7B0D9E8603169DdbD7836e478b4624789' },
    { name: 'WETH', address: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14' },
    { name: 'SETH', address: '0xd38E5c25935291fFD51C9d66C3B7384494bb099A' },
  ], []);

  const loadBalance = useCallback(async (account, token) => {
    if (web3 && token) {
      try {
        const tokenContract = new web3.eth.Contract(ERC20_ABI, token.address);
        const balance = await tokenContract.methods.balanceOf(account).call();
        const decimals = await tokenContract.methods.decimals().call();
        setBalance(Number(balance) / 10 ** Number(decimals));
      } catch (error) {
        console.error(`Failed to load balance for token ${token.symbol}:`, error);
        setBalance(null);
      }
    }
  }, [web3]);

  const loadTokens = useCallback(async (account) => {
    const tokenBalances = [];
    for (const token of knownTokens) {
      try {
        const tokenContract = new web3.eth.Contract(ERC20_ABI, token.address);
        const balance = await tokenContract.methods.balanceOf(account).call();
        const decimals = await tokenContract.methods.decimals().call();
        const symbol = await tokenContract.methods.symbol().call();
        tokenBalances.push({ symbol, balance: Number(balance) / 10 ** Number(decimals), address: token.address });
      } catch (error) {
        console.error(`Failed to load token ${token.name}:`, error);
      }
    }
    setTokens(tokenBalances);
  }, [web3, knownTokens]);

  useEffect(() => {
    if (window.ethereum) {
      const web3Instance = new Web3(window.ethereum);
      setWeb3(web3Instance);
      console.log("Web3 initialized");

      const handleAccountsChanged = async (accounts) => {
        if (accounts.length > 0) {
          setAccount(accounts[0]);
          await loadTokens(accounts[0]);
          if (selectedToken) {
            loadBalance(accounts[0], selectedToken);
          }
        } else {
          setAccount(null);
          setBalance(null);
        }
      };

      window.ethereum.on('accountsChanged', handleAccountsChanged);

      // Cleanup on component unmount
      return () => {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
      };
    } else {
      alert('MetaMask is not installed');
    }
  }, [loadBalance, loadTokens, selectedToken]);

  const connectWallet = async () => {
    if (web3) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        setAccount(accounts[0]);
        await loadTokens(accounts[0]);
        if (selectedToken) {
          loadBalance(accounts[0], selectedToken);
        }
      } catch (error) {
        console.error(error);
      }
    }
  };

  const handleTokenChange = (e) => {
    const token = tokens.find(t => t.address === e.target.value);
    setSelectedToken(token);
    if (account) {
      loadBalance(account, token);
    }
  };

  const disconnectWallet = () => {
    setAccount(null);
    setBalance(null);
    setRecipient('');
    setAmount('');
    setTransactionHash(null);
    window.location.reload();
  };

  const handleTransfer = async () => {
    if (web3 && account && recipient && amount && selectedToken) {
      try {
        const tokenContract = new web3.eth.Contract(ERC20_ABI, selectedToken.address);
        const decimals = await tokenContract.methods.decimals().call();
        const value = bigInt(web3.utils.toWei(amount, 'ether')).divide(bigInt(10).pow(18 - Number(decimals)));
        const tx = await tokenContract.methods.transfer(recipient, value.toString()).send({ from: account });
        setTransactionHash(tx.transactionHash);
      } catch (error) {
        console.error('Failed to transfer token:', error);
      }
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>MetaMask Token Transfer</h1>
        {!account ? (
          <button onClick={connectWallet}>Connect MetaMask</button>
        ) : (
          <div>
            <p>Account: {account}</p>
            <select onChange={handleTokenChange} value={selectedToken?.address || ''}>
              <option value="" disabled>Select Token</option>
              {tokens.map(token => (
                <option key={token.address} value={token.address}>
                  {token.symbol} ({token.balance})
                </option>
              ))}
            </select>
            {selectedToken && <p>Balance: {balance} {selectedToken.symbol}</p>}
            <input
              type="text"
              placeholder="Recipient Address"
              value={recipient}
              onChange={(e) => setRecipient(e.target.value)}
            />
            <input
              type="text"
              placeholder="Amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
            />
            <button onClick={handleTransfer}>Send</button>
            <button onClick={disconnectWallet}>Disconnect</button>
          </div>
        )}
        {transactionHash && (
          <div className="modal">
            <div className="modal-content">
              <span className="close-button" onClick={() => setTransactionHash(null)}>&times;</span>
              <p>Transaction successful!</p>
              <p>Transaction ID: {transactionHash}</p>
            </div>
          </div>
        )}
      </header>
    </div>
  );
};

export default App;
